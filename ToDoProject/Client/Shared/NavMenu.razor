@using System.Security.Claims;
@using ToDoProject.Client.Models;
@using ToDoProject.Models.DTO;
@using ToDoProject.Models.Enums;
@inject ILocalStorageService localStorage;
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/home">To Do Task</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<AuthorizeView>
    <Authorized>
        <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
            <nav class="flex-column">
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="home" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> Home
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="counter">
                        <span class="oi oi-plus" aria-hidden="true"></span> Counter
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="fetchdata">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
                    </NavLink>
                </div>
                @if (/*context.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role).Value.Equals(UserType.ADMIN.ToString())*/CurrentUser?.User?.UserType == UserType.ADMIN)
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="adminpanel">
                            <span class="oi oi-list-rich" aria-hidden="true"></span> Admin Panel
                        </NavLink>
                    </div>
                }
            </nav>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private UserLocalStorage? CurrentUser { get; set; }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        CurrentUser = await localStorage.GetItemAsync<UserLocalStorage>("currentuser");
    //    }
    //}
    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await localStorage.GetItemAsync<UserLocalStorage>("currentuser");
        //return base.OnInitializedAsync();
    }
}
